{
  "getRevertMsg": {
    "prefix": ["revert", "revertMsg", "getRevertMsg"],
    "body": [
      "const getRevertMsg = (msg : string): string =>",
      "`VM Exception while processing transaction: reverted with reason string '\\${msg}'`;"
    ],
    "description": "A function which returns the transaction revert message in EVM-style"
  },
  "expectRevert": {
    "prefix": ["er", "expectRevert", "revert"],
    "body": [
      "await expect(",
      "\t$0",
      ").to.be.revertedWith(getRevertMsg(\"Example Error Msg\"));"
    ],
    "description": "assertion for fail transaction"
  },
  "takeSnapshot": {
    "prefix": ["takesnapshot", "tsnapshot"],
    "body": [
      "async function takeSnapshot() {",
      "\treturn network.provider.send(\"evm_snapshot\", []);",
      "}"
    ],
    "description": "function for taking snapshot in hardhat test"
  },
  "revertToSnapShot": {
    "prefix": ["rs", "revertsnapshot"],
    "body": [
      "async function revertToSnapShot(id: string) {",
      "\tawait network.provider.send(\"evm_revert\", [id]);",
      "}"
    ],
    "description": "function for revert to snapshot in hardhat test with specified snapshot id"
  },
  "advanceTime": {
    "prefix": ["advance", "at"],
    "body": [
      "async function advanceTime(time: number) {",
      "\tawait network.provider.send(\"evm_increaseTime\", [time]);",
      "}"
    ],
    "description": "function to advance time in hardhat test"
  },
  "advanceBlock": {
    "prefix": ["advance", "ab"],
    "body": [
      "async function advanceBlock() {",
      "\tawait network.provider.send(\"evm_mine\", []);",
      "}"
    ],
    "description": "function to advance block in hardhat test"
  },
  "advanceTimeAndBlock": {
    "prefix": ["advance", "atb"],
    "body": [
      "async function advanceTimeAndBlock(time: number): Promise<providers.Block> {",
      "\tawait advanceTime(time);",
      "\tawait advanceBlock();",
      "\treturn Promise.resolve(ethers.provider.getBlock(\"latest\"));",
      "}"
    ],
    "description": "function to advance time and block in hardhat test"
  },
  "numberToBytes32Hex": {
    "prefix": ["n2b", "number2bytes", "nb"],
    "body": ["hexZeroPad(hexlify(${1:number}), 32);"],
    "description": "number to hex bytes32 casting"
  },
  "newTestCase": {
    "prefix": ["it"],
    "body": ["it(\"\", async () => {})"],
    "description": "create new test case with keyword `it`"
  },
  "newTestCategory": {
    "prefix": ["describe"],
    "body": ["describe(\"\", () => {})"],
    "description": "create new test category with keyword `describe`"
  }
}
